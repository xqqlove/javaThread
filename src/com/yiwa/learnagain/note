//https://blog.csdn.net/wanliguodu/article/details/81005560
//https://blog.csdn.net/wanliguodu/article/details/81005560
https://blog.csdn.net/ns_code/article/details/17539599
我们将synchronized的基本规则总结为下面3条，并通过实例对它们进行说明。
第一条:当一个线程访问某对象的synchronized方法或者synchronized代码块时，其他线程对该对象的该synchronized方法或者synchronized代码块的访问将被阻塞。
第二条:当一个线程访问某对象的synchronized方法或者synchronized代码块时，其他线程仍然可以访问该对象的非同步代码块。
第三条:当一个线程访问某对象的synchronized方法或者synchronized代码块时，其他线程对该对象的其他的synchronized方法或者synchronized代码块的访问将被阻塞。
https://blog.csdn.net/wanliguodu/article/details/81071562

wait()的作用是让[[当前线程]]由“运行状态”进入到“等待（阻塞）”的同时，也会释放同步锁,而yield()的作用是让步，它也是让当前线程离开“运行状态”。区别是：
（1）wait()是让线程由“运行状态”进入到“等待（阻塞）状态”，而yield()是让线程由“运行状态”进入到“就绪状态”。
（2）wait()是会让线程释放它所持有的对象的同步锁，而yield()方法不会释放对象的同步锁

wait()的作用是让当前的线程由“运行状态”进入到“等待（阻塞）状态”的同时，也会释放同步锁。
但是sleep()的作用是让当前线程由“运行状态”进入到“休眠（阻塞）”状态。wait()会释放对象的同步锁，
而sleep()则不会释放锁。